/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.apache.thrift.struct.java.dep.fw;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-4")
public class StudentFWService {
  public interface Iface {
    public com.apache.thrift.struct.java.dep.vo.Student structck(com.apache.thrift.struct.java.dep.vo.Student stu) throws org.apache.thrift.TException;
  }
  public interface AsyncIface {
    public void structck(com.apache.thrift.struct.java.dep.vo.Student stu, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
  }
  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }
    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }
    @Override
    public com.apache.thrift.struct.java.dep.vo.Student structck(com.apache.thrift.struct.java.dep.vo.Student stu) throws org.apache.thrift.TException {
      send_structck(stu);
      return recv_structck();
    }
    public void send_structck(com.apache.thrift.struct.java.dep.vo.Student stu) throws org.apache.thrift.TException {
      structck_args args = new structck_args();
      args.setStu(stu);
      sendBase("structck", args);
    }
    public com.apache.thrift.struct.java.dep.vo.Student recv_structck() throws org.apache.thrift.TException {
      structck_result result = new structck_result();
      receiveBase(result, "structck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "structck failed: unknown result");
    }
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }
  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }
    @Override
    public void structck(com.apache.thrift.struct.java.dep.vo.Student stu, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      structck_call method_call = new structck_call(stu, resultHandler, this, ___protocolFactory, ___transport);
      ___currentMethod = method_call;
      ___manager.call(method_call);
    }
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }
    public static class structck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.apache.thrift.struct.java.dep.vo.Student stu;
      public structck_call(com.apache.thrift.struct.java.dep.vo.Student stu, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stu = stu;
      }
      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("structck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        structck_args args = new structck_args();
        args.setStu(stu);
        args.write(prot);
        prot.writeMessageEnd();
      }
      public com.apache.thrift.struct.java.dep.vo.Student getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_structck();
      }
    }
  }
  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }
    protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }
    private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("structck", new structck());
      return processMap;
    }
    public static class structck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, structck_args> {
      public structck() {
        super("structck");
      }
      @Override
      public structck_args getEmptyArgsInstance() {
        return new structck_args();
      }
      @Override
      protected boolean isOneway() {
        return false;
      }
      @Override
      public structck_result getResult(I iface, structck_args args) throws org.apache.thrift.TException {
        structck_result result = new structck_result();
        result.success = iface.structck(args.stu);
        return result;
      }
    }
  }
  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }
    protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }
    private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("structck", new structck());
      return processMap;
    }
    public static class structck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, structck_args, com.apache.thrift.struct.java.dep.vo.Student> {
      public structck() {
        super("structck");
      }
      @Override
      public structck_args getEmptyArgsInstance() {
        return new structck_args();
      }
      @Override
      public AsyncMethodCallback<com.apache.thrift.struct.java.dep.vo.Student> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.apache.thrift.struct.java.dep.vo.Student>() {
          @Override
          public void onComplete(com.apache.thrift.struct.java.dep.vo.Student o) {
            structck_result result = new structck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            structck_result result = new structck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }
      @Override
      protected boolean isOneway() {
        return false;
      }
      @Override
      public void start(I iface, structck_args args, org.apache.thrift.async.AsyncMethodCallback<com.apache.thrift.struct.java.dep.vo.Student> resultHandler) throws TException {
        iface.structck(args.stu, resultHandler);
      }
    }
  }
  public static class structck_args implements org.apache.thrift.TBase<structck_args, structck_args._Fields>, java.io.Serializable, Cloneable, Comparable<structck_args> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("structck_args");
    private static final org.apache.thrift.protocol.TField STU_FIELD_DESC = new org.apache.thrift.protocol.TField("stu", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new structck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new structck_argsTupleSchemeFactory());
    }
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU, new org.apache.thrift.meta_data.FieldMetaData("stu", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apache.thrift.struct.java.dep.vo.Student.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(structck_args.class, metaDataMap);
    }
    public com.apache.thrift.struct.java.dep.vo.Student stu; // required
    public structck_args() {
    }
    public structck_args(com.apache.thrift.struct.java.dep.vo.Student stu) {
      this();
      this.stu = stu;
    }
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public structck_args(structck_args other) {
      if (other.isSetStu()) {
        stu = new com.apache.thrift.struct.java.dep.vo.Student(other.stu);
      }
    }
    @Override
    public structck_args deepCopy() {
      return new structck_args(this);
    }
    @Override
    public void clear() {
      stu = null;
    }
    public com.apache.thrift.struct.java.dep.vo.Student getStu() {
      return stu;
    }
    public structck_args setStu(com.apache.thrift.struct.java.dep.vo.Student stu) {
      this.stu = stu;
      return this;
    }
    public void unsetStu() {
      stu = null;
    }
    /**
     * Returns true if field stu is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStu() {
      return stu != null;
    }
    public void setStuIsSet(boolean value) {
      if (!value) {
        stu = null;
      }
    }
    @Override
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case STU:
          if (value == null) {
            unsetStu();
          } else {
            setStu((com.apache.thrift.struct.java.dep.vo.Student) value);
          }
          break;
      }
    }
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case STU:
          return getStu();
      }
      throw new IllegalStateException();
    }
    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }
      switch (field) {
        case STU:
          return isSetStu();
      }
      throw new IllegalStateException();
    }
    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof structck_args) {
        return this.equals((structck_args) that);
      }
      return false;
    }
    public boolean equals(structck_args that) {
      if (that == null) {
        return false;
      }
      boolean this_present_stu = true && isSetStu();
      boolean that_present_stu = true && that.isSetStu();
      if (this_present_stu || that_present_stu) {
        if (!(this_present_stu && that_present_stu)) {
          return false;
        }
        if (!stu.equals(that.stu)) {
          return false;
        }
      }
      return true;
    }
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();
      boolean present_stu = true && (isSetStu());
      list.add(present_stu);
      if (present_stu) {
        list.add(stu);
      }
      return list.hashCode();
    }
    @Override
    public int compareTo(structck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      int lastComparison = 0;
      lastComparison = Boolean.valueOf(isSetStu()).compareTo(other.isSetStu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(stu, other.stu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }
    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("structck_args(");
      boolean first = true;
      sb.append("stu:");
      if (stu == null) {
        sb.append("null");
      } else {
        sb.append(stu);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stu != null) {
        stu.validate();
      }
    }
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU((short) 1, "stu");
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      private final short _thriftId;
      private final String _fieldName;
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // STU
            return STU;
          default:
            return null;
        }
      }
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }
      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }
    private static class structck_argsStandardSchemeFactory implements SchemeFactory {
      @Override
      public structck_argsStandardScheme getScheme() {
        return new structck_argsStandardScheme();
      }
    }
    private static class structck_argsStandardScheme extends StandardScheme<structck_args> {
      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, structck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stu = new com.apache.thrift.struct.java.dep.vo.Student();
                struct.stu.read(iprot);
                struct.setStuIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }
      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, structck_args struct) throws org.apache.thrift.TException {
        struct.validate();
        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stu != null) {
          oprot.writeFieldBegin(STU_FIELD_DESC);
          struct.stu.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }
    private static class structck_argsTupleSchemeFactory implements SchemeFactory {
      @Override
      public structck_argsTupleScheme getScheme() {
        return new structck_argsTupleScheme();
      }
    }
    private static class structck_argsTupleScheme extends TupleScheme<structck_args> {
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, structck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStu()) {
          struct.stu.write(oprot);
        }
      }
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, structck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stu = new com.apache.thrift.struct.java.dep.vo.Student();
          struct.stu.read(iprot);
          struct.setStuIsSet(true);
        }
      }
    }
  }
  public static class structck_result implements org.apache.thrift.TBase<structck_result, structck_result._Fields>, java.io.Serializable, Cloneable, Comparable<structck_result> {
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("structck_result");
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new structck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new structck_resultTupleSchemeFactory());
    }
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.apache.thrift.struct.java.dep.vo.Student.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(structck_result.class, metaDataMap);
    }
    public com.apache.thrift.struct.java.dep.vo.Student success; // required
    public structck_result() {
    }
    public structck_result(com.apache.thrift.struct.java.dep.vo.Student success) {
      this();
      this.success = success;
    }
    /**
     * Performs a deep copy on <i>other</i>.
     */
    public structck_result(structck_result other) {
      if (other.isSetSuccess()) {
        success = new com.apache.thrift.struct.java.dep.vo.Student(other.success);
      }
    }
    @Override
    public structck_result deepCopy() {
      return new structck_result(this);
    }
    @Override
    public void clear() {
      success = null;
    }
    public com.apache.thrift.struct.java.dep.vo.Student getSuccess() {
      return success;
    }
    public structck_result setSuccess(com.apache.thrift.struct.java.dep.vo.Student success) {
      this.success = success;
      return this;
    }
    public void unsetSuccess() {
      success = null;
    }
    /**
     * Returns true if field success is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSuccess() {
      return success != null;
    }
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        success = null;
      }
    }
    @Override
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((com.apache.thrift.struct.java.dep.vo.Student) value);
          }
          break;
      }
    }
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();
      }
      throw new IllegalStateException();
    }
    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }
      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }
    @Override
    public boolean equals(Object that) {
      if (that == null) {
        return false;
      }
      if (that instanceof structck_result) {
        return this.equals((structck_result) that);
      }
      return false;
    }
    public boolean equals(structck_result that) {
      if (that == null) {
        return false;
      }
      boolean this_present_success = true && isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success)) {
          return false;
        }
        if (!success.equals(that.success)) {
          return false;
        }
      }
      return true;
    }
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();
      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success) {
        list.add(success);
      }
      return list.hashCode();
    }
    @Override
    public int compareTo(structck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }
      int lastComparison = 0;
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }
    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("structck_result(");
      boolean first = true;
      sb.append("success:");
      if (success == null) {
        sb.append("null");
      } else {
        sb.append(success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }
      private final short _thriftId;
      private final String _fieldName;
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) {
          throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        }
        return fields;
      }
      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }
      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }
      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }
    private static class structck_resultStandardSchemeFactory implements SchemeFactory {
      @Override
      public structck_resultStandardScheme getScheme() {
        return new structck_resultStandardScheme();
      }
    }
    private static class structck_resultStandardScheme extends StandardScheme<structck_result> {
      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, structck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.apache.thrift.struct.java.dep.vo.Student();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }
      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, structck_result struct) throws org.apache.thrift.TException {
        struct.validate();
        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }
    }
    private static class structck_resultTupleSchemeFactory implements SchemeFactory {
      @Override
      public structck_resultTupleScheme getScheme() {
        return new structck_resultTupleScheme();
      }
    }
    private static class structck_resultTupleScheme extends TupleScheme<structck_result> {
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, structck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, structck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.apache.thrift.struct.java.dep.vo.Student();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }
  }
}
