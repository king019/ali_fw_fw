/**
 * Autogenerated by Thrift Compiler (0.9.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.apache.thrift.struct.java.dep.vo;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-4")
public class Student implements org.apache.thrift.TBase<Student, Student._Fields>, java.io.Serializable, Cloneable, Comparable<Student> {
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Student");
  private static final org.apache.thrift.protocol.TField BOOLCK_FIELD_DESC = new org.apache.thrift.protocol.TField("boolck", org.apache.thrift.protocol.TType.BOOL, (short) 1);
  private static final org.apache.thrift.protocol.TField BYTECK_FIELD_DESC = new org.apache.thrift.protocol.TField("byteck", org.apache.thrift.protocol.TType.BYTE, (short) 2);
  private static final org.apache.thrift.protocol.TField I16CK_FIELD_DESC = new org.apache.thrift.protocol.TField("i16ck", org.apache.thrift.protocol.TType.I16, (short) 3);
  private static final org.apache.thrift.protocol.TField I32CK_FIELD_DESC = new org.apache.thrift.protocol.TField("i32ck", org.apache.thrift.protocol.TType.I32, (short) 4);
  private static final org.apache.thrift.protocol.TField I64CK_FIELD_DESC = new org.apache.thrift.protocol.TField("i64ck", org.apache.thrift.protocol.TType.I64, (short) 5);
  private static final org.apache.thrift.protocol.TField DOUBLECK_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleck", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);
  private static final org.apache.thrift.protocol.TField STRINGCK_FIELD_DESC = new org.apache.thrift.protocol.TField("stringck", org.apache.thrift.protocol.TType.STRING, (short) 7);
  private static final org.apache.thrift.protocol.TField LISTSTU_FIELD_DESC = new org.apache.thrift.protocol.TField("liststu", org.apache.thrift.protocol.TType.LIST, (short) 8);
  private static final org.apache.thrift.protocol.TField SETSTU_FIELD_DESC = new org.apache.thrift.protocol.TField("setstu", org.apache.thrift.protocol.TType.SET, (short) 9);
  private static final org.apache.thrift.protocol.TField MAPSTU_FIELD_DESC = new org.apache.thrift.protocol.TField("mapstu", org.apache.thrift.protocol.TType.MAP, (short) 10);
  private static final org.apache.thrift.protocol.TField ENUMCK_FIELD_DESC = new org.apache.thrift.protocol.TField("enumck", org.apache.thrift.protocol.TType.I32, (short) 11);
  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  // isset id assignments
  private static final int __BOOLCK_ISSET_ID = 0;
  private static final int __BYTECK_ISSET_ID = 1;
  private static final int __I16CK_ISSET_ID = 2;
  private static final int __I32CK_ISSET_ID = 3;
  private static final int __I64CK_ISSET_ID = 4;
  private static final int __DOUBLECK_ISSET_ID = 5;
  static {
    schemes.put(StandardScheme.class, new StudentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StudentTupleSchemeFactory());
  }
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLCK, new org.apache.thrift.meta_data.FieldMetaData("boolck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTECK, new org.apache.thrift.meta_data.FieldMetaData("byteck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16CK, new org.apache.thrift.meta_data.FieldMetaData("i16ck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32CK, new org.apache.thrift.meta_data.FieldMetaData("i32ck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64CK, new org.apache.thrift.meta_data.FieldMetaData("i64ck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLECK, new org.apache.thrift.meta_data.FieldMetaData("doubleck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRINGCK, new org.apache.thrift.meta_data.FieldMetaData("stringck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LISTSTU, new org.apache.thrift.meta_data.FieldMetaData("liststu", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "Student"))));
    tmpMap.put(_Fields.SETSTU, new org.apache.thrift.meta_data.FieldMetaData("setstu", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "Student"))));
    tmpMap.put(_Fields.MAPSTU, new org.apache.thrift.meta_data.FieldMetaData("mapstu", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "Student"))));
    tmpMap.put(_Fields.ENUMCK, new org.apache.thrift.meta_data.FieldMetaData("enumck", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.apache.thrift.struct.java.dep.vo.StudentEnum.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Student.class, metaDataMap);
  }
  public boolean boolck; // required
  public byte byteck; // required
  public short i16ck; // required
  public int i32ck; // required
  public long i64ck; // required
  public double doubleck; // required
  public String stringck; // required
  public List<Student> liststu; // required
  public Set<Student> setstu; // required
  public Map<String, Student> mapstu; // required
  /**
   * @see com.apache.thrift.struct.java.dep.vo.StudentEnum
   */
  public com.apache.thrift.struct.java.dep.vo.StudentEnum enumck; // required
  private byte __isset_bitfield = 0;
  public Student() {
  }
  public Student(boolean boolck, byte byteck, short i16ck, int i32ck, long i64ck, double doubleck, String stringck, List<Student> liststu, Set<Student> setstu, Map<String, Student> mapstu, com.apache.thrift.struct.java.dep.vo.StudentEnum enumck) {
    this();
    this.boolck = boolck;
    setBoolckIsSet(true);
    this.byteck = byteck;
    setByteckIsSet(true);
    this.i16ck = i16ck;
    setI16ckIsSet(true);
    this.i32ck = i32ck;
    setI32ckIsSet(true);
    this.i64ck = i64ck;
    setI64ckIsSet(true);
    this.doubleck = doubleck;
    setDoubleckIsSet(true);
    this.stringck = stringck;
    this.liststu = liststu;
    this.setstu = setstu;
    this.mapstu = mapstu;
    this.enumck = enumck;
  }
  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Student(Student other) {
    __isset_bitfield = other.__isset_bitfield;
    boolck = other.boolck;
    byteck = other.byteck;
    i16ck = other.i16ck;
    i32ck = other.i32ck;
    i64ck = other.i64ck;
    doubleck = other.doubleck;
    if (other.isSetStringck()) {
      stringck = other.stringck;
    }
    if (other.isSetListstu()) {
      List<Student> __this__liststu = new ArrayList<Student>(other.liststu.size());
      for (Student other_element : other.liststu) {
        __this__liststu.add(other_element);
      }
      liststu = __this__liststu;
    }
    if (other.isSetSetstu()) {
      Set<Student> __this__setstu = new HashSet<Student>(other.setstu.size());
      for (Student other_element : other.setstu) {
        __this__setstu.add(other_element);
      }
      setstu = __this__setstu;
    }
    if (other.isSetMapstu()) {
      Map<String, Student> __this__mapstu = new HashMap<String, Student>(other.mapstu.size());
      for (Map.Entry<String, Student> other_element : other.mapstu.entrySet()) {
        String other_element_key = other_element.getKey();
        Student other_element_value = other_element.getValue();
        String __this__mapstu_copy_key = other_element_key;
        Student __this__mapstu_copy_value = other_element_value;
        __this__mapstu.put(__this__mapstu_copy_key, __this__mapstu_copy_value);
      }
      mapstu = __this__mapstu;
    }
    if (other.isSetEnumck()) {
      enumck = other.enumck;
    }
  }
  @Override
  public Student deepCopy() {
    return new Student(this);
  }
  @Override
  public void clear() {
    setBoolckIsSet(false);
    boolck = false;
    setByteckIsSet(false);
    byteck = 0;
    setI16ckIsSet(false);
    i16ck = 0;
    setI32ckIsSet(false);
    i32ck = 0;
    setI64ckIsSet(false);
    i64ck = 0;
    setDoubleckIsSet(false);
    doubleck = 0.0;
    stringck = null;
    liststu = null;
    setstu = null;
    mapstu = null;
    enumck = null;
  }
  public boolean isBoolck() {
    return boolck;
  }
  public Student setBoolck(boolean boolck) {
    this.boolck = boolck;
    setBoolckIsSet(true);
    return this;
  }
  public void unsetBoolck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLCK_ISSET_ID);
  }
  /**
   * Returns true if field boolck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetBoolck() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLCK_ISSET_ID);
  }
  public void setBoolckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLCK_ISSET_ID, value);
  }
  public byte getByteck() {
    return byteck;
  }
  public Student setByteck(byte byteck) {
    this.byteck = byteck;
    setByteckIsSet(true);
    return this;
  }
  public void unsetByteck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTECK_ISSET_ID);
  }
  /**
   * Returns true if field byteck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetByteck() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTECK_ISSET_ID);
  }
  public void setByteckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTECK_ISSET_ID, value);
  }
  public short getI16ck() {
    return i16ck;
  }
  public Student setI16ck(short i16ck) {
    this.i16ck = i16ck;
    setI16ckIsSet(true);
    return this;
  }
  public void unsetI16ck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16CK_ISSET_ID);
  }
  /**
   * Returns true if field i16ck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetI16ck() {
    return EncodingUtils.testBit(__isset_bitfield, __I16CK_ISSET_ID);
  }
  public void setI16ckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16CK_ISSET_ID, value);
  }
  public int getI32ck() {
    return i32ck;
  }
  public Student setI32ck(int i32ck) {
    this.i32ck = i32ck;
    setI32ckIsSet(true);
    return this;
  }
  public void unsetI32ck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32CK_ISSET_ID);
  }
  /**
   * Returns true if field i32ck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetI32ck() {
    return EncodingUtils.testBit(__isset_bitfield, __I32CK_ISSET_ID);
  }
  public void setI32ckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32CK_ISSET_ID, value);
  }
  public long getI64ck() {
    return i64ck;
  }
  public Student setI64ck(long i64ck) {
    this.i64ck = i64ck;
    setI64ckIsSet(true);
    return this;
  }
  public void unsetI64ck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64CK_ISSET_ID);
  }
  /**
   * Returns true if field i64ck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetI64ck() {
    return EncodingUtils.testBit(__isset_bitfield, __I64CK_ISSET_ID);
  }
  public void setI64ckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64CK_ISSET_ID, value);
  }
  public double getDoubleck() {
    return doubleck;
  }
  public Student setDoubleck(double doubleck) {
    this.doubleck = doubleck;
    setDoubleckIsSet(true);
    return this;
  }
  public void unsetDoubleck() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLECK_ISSET_ID);
  }
  /**
   * Returns true if field doubleck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetDoubleck() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLECK_ISSET_ID);
  }
  public void setDoubleckIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLECK_ISSET_ID, value);
  }
  public String getStringck() {
    return stringck;
  }
  public Student setStringck(String stringck) {
    this.stringck = stringck;
    return this;
  }
  public void unsetStringck() {
    stringck = null;
  }
  /**
   * Returns true if field stringck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetStringck() {
    return stringck != null;
  }
  public void setStringckIsSet(boolean value) {
    if (!value) {
      stringck = null;
    }
  }
  public int getListstuSize() {
    return (liststu == null) ? 0 : liststu.size();
  }
  public java.util.Iterator<Student> getListstuIterator() {
    return (liststu == null) ? null : liststu.iterator();
  }
  public void addToListstu(Student elem) {
    if (liststu == null) {
      liststu = new ArrayList<Student>();
    }
    liststu.add(elem);
  }
  public List<Student> getListstu() {
    return liststu;
  }
  public Student setListstu(List<Student> liststu) {
    this.liststu = liststu;
    return this;
  }
  public void unsetListstu() {
    liststu = null;
  }
  /**
   * Returns true if field liststu is set (has been assigned a value) and false otherwise
   */
  public boolean isSetListstu() {
    return liststu != null;
  }
  public void setListstuIsSet(boolean value) {
    if (!value) {
      liststu = null;
    }
  }
  public int getSetstuSize() {
    return (setstu == null) ? 0 : setstu.size();
  }
  public java.util.Iterator<Student> getSetstuIterator() {
    return (setstu == null) ? null : setstu.iterator();
  }
  public void addToSetstu(Student elem) {
    if (setstu == null) {
      setstu = new HashSet<Student>();
    }
    setstu.add(elem);
  }
  public Set<Student> getSetstu() {
    return setstu;
  }
  public Student setSetstu(Set<Student> setstu) {
    this.setstu = setstu;
    return this;
  }
  public void unsetSetstu() {
    setstu = null;
  }
  /**
   * Returns true if field setstu is set (has been assigned a value) and false otherwise
   */
  public boolean isSetSetstu() {
    return setstu != null;
  }
  public void setSetstuIsSet(boolean value) {
    if (!value) {
      setstu = null;
    }
  }
  public int getMapstuSize() {
    return (mapstu == null) ? 0 : mapstu.size();
  }
  public void putToMapstu(String key, Student val) {
    if (mapstu == null) {
      mapstu = new HashMap<String, Student>();
    }
    mapstu.put(key, val);
  }
  public Map<String, Student> getMapstu() {
    return mapstu;
  }
  public Student setMapstu(Map<String, Student> mapstu) {
    this.mapstu = mapstu;
    return this;
  }
  public void unsetMapstu() {
    mapstu = null;
  }
  /**
   * Returns true if field mapstu is set (has been assigned a value) and false otherwise
   */
  public boolean isSetMapstu() {
    return mapstu != null;
  }
  public void setMapstuIsSet(boolean value) {
    if (!value) {
      mapstu = null;
    }
  }
  /**
   * @see com.apache.thrift.struct.java.dep.vo.StudentEnum
   */
  public com.apache.thrift.struct.java.dep.vo.StudentEnum getEnumck() {
    return enumck;
  }
  /**
   * @see com.apache.thrift.struct.java.dep.vo.StudentEnum
   */
  public Student setEnumck(com.apache.thrift.struct.java.dep.vo.StudentEnum enumck) {
    this.enumck = enumck;
    return this;
  }
  public void unsetEnumck() {
    enumck = null;
  }
  /**
   * Returns true if field enumck is set (has been assigned a value) and false otherwise
   */
  public boolean isSetEnumck() {
    return enumck != null;
  }
  public void setEnumckIsSet(boolean value) {
    if (!value) {
      enumck = null;
    }
  }
  @Override
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case BOOLCK:
        if (value == null) {
          unsetBoolck();
        } else {
          setBoolck((Boolean) value);
        }
        break;
      case BYTECK:
        if (value == null) {
          unsetByteck();
        } else {
          setByteck((Byte) value);
        }
        break;
      case I16CK:
        if (value == null) {
          unsetI16ck();
        } else {
          setI16ck((Short) value);
        }
        break;
      case I32CK:
        if (value == null) {
          unsetI32ck();
        } else {
          setI32ck((Integer) value);
        }
        break;
      case I64CK:
        if (value == null) {
          unsetI64ck();
        } else {
          setI64ck((Long) value);
        }
        break;
      case DOUBLECK:
        if (value == null) {
          unsetDoubleck();
        } else {
          setDoubleck((Double) value);
        }
        break;
      case STRINGCK:
        if (value == null) {
          unsetStringck();
        } else {
          setStringck((String) value);
        }
        break;
      case LISTSTU:
        if (value == null) {
          unsetListstu();
        } else {
          setListstu((List<Student>) value);
        }
        break;
      case SETSTU:
        if (value == null) {
          unsetSetstu();
        } else {
          setSetstu((Set<Student>) value);
        }
        break;
      case MAPSTU:
        if (value == null) {
          unsetMapstu();
        } else {
          setMapstu((Map<String, Student>) value);
        }
        break;
      case ENUMCK:
        if (value == null) {
          unsetEnumck();
        } else {
          setEnumck((com.apache.thrift.struct.java.dep.vo.StudentEnum) value);
        }
        break;
    }
  }
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
      case BOOLCK:
        return Boolean.valueOf(isBoolck());
      case BYTECK:
        return Byte.valueOf(getByteck());
      case I16CK:
        return Short.valueOf(getI16ck());
      case I32CK:
        return Integer.valueOf(getI32ck());
      case I64CK:
        return Long.valueOf(getI64ck());
      case DOUBLECK:
        return Double.valueOf(getDoubleck());
      case STRINGCK:
        return getStringck();
      case LISTSTU:
        return getListstu();
      case SETSTU:
        return getSetstu();
      case MAPSTU:
        return getMapstu();
      case ENUMCK:
        return getEnumck();
    }
    throw new IllegalStateException();
  }
  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }
    switch (field) {
      case BOOLCK:
        return isSetBoolck();
      case BYTECK:
        return isSetByteck();
      case I16CK:
        return isSetI16ck();
      case I32CK:
        return isSetI32ck();
      case I64CK:
        return isSetI64ck();
      case DOUBLECK:
        return isSetDoubleck();
      case STRINGCK:
        return isSetStringck();
      case LISTSTU:
        return isSetListstu();
      case SETSTU:
        return isSetSetstu();
      case MAPSTU:
        return isSetMapstu();
      case ENUMCK:
        return isSetEnumck();
    }
    throw new IllegalStateException();
  }
  @Override
  public boolean equals(Object that) {
    if (that == null) {
      return false;
    }
    if (that instanceof Student) {
      return this.equals((Student) that);
    }
    return false;
  }
  public boolean equals(Student that) {
    if (that == null) {
      return false;
    }
    boolean this_present_boolck = true;
    boolean that_present_boolck = true;
    if (this_present_boolck || that_present_boolck) {
      if (!(this_present_boolck && that_present_boolck)) {
        return false;
      }
      if (boolck != that.boolck) {
        return false;
      }
    }
    boolean this_present_byteck = true;
    boolean that_present_byteck = true;
    if (this_present_byteck || that_present_byteck) {
      if (!(this_present_byteck && that_present_byteck)) {
        return false;
      }
      if (byteck != that.byteck) {
        return false;
      }
    }
    boolean this_present_i16ck = true;
    boolean that_present_i16ck = true;
    if (this_present_i16ck || that_present_i16ck) {
      if (!(this_present_i16ck && that_present_i16ck)) {
        return false;
      }
      if (i16ck != that.i16ck) {
        return false;
      }
    }
    boolean this_present_i32ck = true;
    boolean that_present_i32ck = true;
    if (this_present_i32ck || that_present_i32ck) {
      if (!(this_present_i32ck && that_present_i32ck)) {
        return false;
      }
      if (i32ck != that.i32ck) {
        return false;
      }
    }
    boolean this_present_i64ck = true;
    boolean that_present_i64ck = true;
    if (this_present_i64ck || that_present_i64ck) {
      if (!(this_present_i64ck && that_present_i64ck)) {
        return false;
      }
      if (i64ck != that.i64ck) {
        return false;
      }
    }
    boolean this_present_doubleck = true;
    boolean that_present_doubleck = true;
    if (this_present_doubleck || that_present_doubleck) {
      if (!(this_present_doubleck && that_present_doubleck)) {
        return false;
      }
      if (doubleck != that.doubleck) {
        return false;
      }
    }
    boolean this_present_stringck = true && isSetStringck();
    boolean that_present_stringck = true && that.isSetStringck();
    if (this_present_stringck || that_present_stringck) {
      if (!(this_present_stringck && that_present_stringck)) {
        return false;
      }
      if (!stringck.equals(that.stringck)) {
        return false;
      }
    }
    boolean this_present_liststu = true && isSetListstu();
    boolean that_present_liststu = true && that.isSetListstu();
    if (this_present_liststu || that_present_liststu) {
      if (!(this_present_liststu && that_present_liststu)) {
        return false;
      }
      if (!liststu.equals(that.liststu)) {
        return false;
      }
    }
    boolean this_present_setstu = true && isSetSetstu();
    boolean that_present_setstu = true && that.isSetSetstu();
    if (this_present_setstu || that_present_setstu) {
      if (!(this_present_setstu && that_present_setstu)) {
        return false;
      }
      if (!setstu.equals(that.setstu)) {
        return false;
      }
    }
    boolean this_present_mapstu = true && isSetMapstu();
    boolean that_present_mapstu = true && that.isSetMapstu();
    if (this_present_mapstu || that_present_mapstu) {
      if (!(this_present_mapstu && that_present_mapstu)) {
        return false;
      }
      if (!mapstu.equals(that.mapstu)) {
        return false;
      }
    }
    boolean this_present_enumck = true && isSetEnumck();
    boolean that_present_enumck = true && that.isSetEnumck();
    if (this_present_enumck || that_present_enumck) {
      if (!(this_present_enumck && that_present_enumck)) {
        return false;
      }
      if (!enumck.equals(that.enumck)) {
        return false;
      }
    }
    return true;
  }
  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    boolean present_boolck = true;
    list.add(present_boolck);
    if (present_boolck) {
      list.add(boolck);
    }
    boolean present_byteck = true;
    list.add(present_byteck);
    if (present_byteck) {
      list.add(byteck);
    }
    boolean present_i16ck = true;
    list.add(present_i16ck);
    if (present_i16ck) {
      list.add(i16ck);
    }
    boolean present_i32ck = true;
    list.add(present_i32ck);
    if (present_i32ck) {
      list.add(i32ck);
    }
    boolean present_i64ck = true;
    list.add(present_i64ck);
    if (present_i64ck) {
      list.add(i64ck);
    }
    boolean present_doubleck = true;
    list.add(present_doubleck);
    if (present_doubleck) {
      list.add(doubleck);
    }
    boolean present_stringck = true && (isSetStringck());
    list.add(present_stringck);
    if (present_stringck) {
      list.add(stringck);
    }
    boolean present_liststu = true && (isSetListstu());
    list.add(present_liststu);
    if (present_liststu) {
      list.add(liststu);
    }
    boolean present_setstu = true && (isSetSetstu());
    list.add(present_setstu);
    if (present_setstu) {
      list.add(setstu);
    }
    boolean present_mapstu = true && (isSetMapstu());
    list.add(present_mapstu);
    if (present_mapstu) {
      list.add(mapstu);
    }
    boolean present_enumck = true && (isSetEnumck());
    list.add(present_enumck);
    if (present_enumck) {
      list.add(enumck.getValue());
    }
    return list.hashCode();
  }
  @Override
  public int compareTo(Student other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }
    int lastComparison = 0;
    lastComparison = Boolean.valueOf(isSetBoolck()).compareTo(other.isSetBoolck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(boolck, other.boolck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteck()).compareTo(other.isSetByteck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(byteck, other.byteck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16ck()).compareTo(other.isSetI16ck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16ck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(i16ck, other.i16ck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32ck()).compareTo(other.isSetI32ck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32ck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(i32ck, other.i32ck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64ck()).compareTo(other.isSetI64ck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64ck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(i64ck, other.i64ck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleck()).compareTo(other.isSetDoubleck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(doubleck, other.doubleck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringck()).compareTo(other.isSetStringck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(stringck, other.stringck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListstu()).compareTo(other.isSetListstu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListstu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(liststu, other.liststu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetstu()).compareTo(other.isSetSetstu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetstu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(setstu, other.setstu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapstu()).compareTo(other.isSetMapstu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapstu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(mapstu, other.mapstu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumck()).compareTo(other.isSetEnumck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(enumck, other.enumck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }
  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Student(");
    boolean first = true;
    sb.append("boolck:");
    sb.append(boolck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("byteck:");
    sb.append(byteck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("i16ck:");
    sb.append(i16ck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("i32ck:");
    sb.append(i32ck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("i64ck:");
    sb.append(i64ck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("doubleck:");
    sb.append(doubleck);
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("stringck:");
    if (stringck == null) {
      sb.append("null");
    } else {
      sb.append(stringck);
    }
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("liststu:");
    if (liststu == null) {
      sb.append("null");
    } else {
      sb.append(liststu);
    }
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("setstu:");
    if (setstu == null) {
      sb.append("null");
    } else {
      sb.append(setstu);
    }
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("mapstu:");
    if (mapstu == null) {
      sb.append("null");
    } else {
      sb.append(mapstu);
    }
    first = false;
    if (!first) {
      sb.append(", ");
    }
    sb.append("enumck:");
    if (enumck == null) {
      sb.append("null");
    } else {
      sb.append(enumck);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }
  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
  /**
   * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOLCK((short) 1, "boolck"), BYTECK((short) 2, "byteck"), I16CK((short) 3, "i16ck"), I32CK((short) 4, "i32ck"), I64CK((short) 5, "i64ck"), DOUBLECK((short) 6, "doubleck"), STRINGCK((short) 7, "stringck"), LISTSTU((short) 8, "liststu"), SETSTU((short) 9, "setstu"), MAPSTU((short) 10, "mapstu"),
    /**
     * @see com.apache.thrift.struct.java.dep.vo.StudentEnum
     */
    ENUMCK((short) 11, "enumck");
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
    private final short _thriftId;
    private final String _fieldName;
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // BOOLCK
          return BOOLCK;
        case 2: // BYTECK
          return BYTECK;
        case 3: // I16CK
          return I16CK;
        case 4: // I32CK
          return I32CK;
        case 5: // I64CK
          return I64CK;
        case 6: // DOUBLECK
          return DOUBLECK;
        case 7: // STRINGCK
          return STRINGCK;
        case 8: // LISTSTU
          return LISTSTU;
        case 9: // SETSTU
          return SETSTU;
        case 10: // MAPSTU
          return MAPSTU;
        case 11: // ENUMCK
          return ENUMCK;
        default:
          return null;
      }
    }
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) {
        throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      }
      return fields;
    }
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }
    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }
  private static class StudentStandardSchemeFactory implements SchemeFactory {
    @Override
    public StudentStandardScheme getScheme() {
      return new StudentStandardScheme();
    }
  }
  private static class StudentStandardScheme extends StandardScheme<Student> {
    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Student struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOLCK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolck = iprot.readBool();
              struct.setBoolckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTECK
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteck = iprot.readByte();
              struct.setByteckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I16CK
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16ck = iprot.readI16();
              struct.setI16ckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I32CK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32ck = iprot.readI32();
              struct.setI32ckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I64CK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64ck = iprot.readI64();
              struct.setI64ckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLECK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleck = iprot.readDouble();
              struct.setDoubleckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRINGCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringck = iprot.readString();
              struct.setStringckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LISTSTU
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.liststu = new ArrayList<Student>(_list0.size);
                Student _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                  _elem1 = new Student();
                  _elem1.read(iprot);
                  struct.liststu.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListstuIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SETSTU
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.setstu = new HashSet<Student>(2 * _set3.size);
                Student _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5) {
                  _elem4 = new Student();
                  _elem4.read(iprot);
                  struct.setstu.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setSetstuIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAPSTU
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.mapstu = new HashMap<String, Student>(2 * _map6.size);
                String _key7;
                Student _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
                  _key7 = iprot.readString();
                  _val8 = new Student();
                  _val8.read(iprot);
                  struct.mapstu.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMapstuIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENUMCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumck = com.apache.thrift.struct.java.dep.vo.StudentEnum.findByValue(iprot.readI32());
              struct.setEnumckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }
    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Student struct) throws org.apache.thrift.TException {
      struct.validate();
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOLCK_FIELD_DESC);
      oprot.writeBool(struct.boolck);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTECK_FIELD_DESC);
      oprot.writeByte(struct.byteck);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I16CK_FIELD_DESC);
      oprot.writeI16(struct.i16ck);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I32CK_FIELD_DESC);
      oprot.writeI32(struct.i32ck);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64CK_FIELD_DESC);
      oprot.writeI64(struct.i64ck);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLECK_FIELD_DESC);
      oprot.writeDouble(struct.doubleck);
      oprot.writeFieldEnd();
      if (struct.stringck != null) {
        oprot.writeFieldBegin(STRINGCK_FIELD_DESC);
        oprot.writeString(struct.stringck);
        oprot.writeFieldEnd();
      }
      if (struct.liststu != null) {
        oprot.writeFieldBegin(LISTSTU_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.liststu.size()));
          for (Student _iter10 : struct.liststu) {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setstu != null) {
        oprot.writeFieldBegin(SETSTU_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.setstu.size()));
          for (Student _iter11 : struct.setstu) {
            _iter11.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapstu != null) {
        oprot.writeFieldBegin(MAPSTU_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mapstu.size()));
          for (Map.Entry<String, Student> _iter12 : struct.mapstu.entrySet()) {
            oprot.writeString(_iter12.getKey());
            _iter12.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.enumck != null) {
        oprot.writeFieldBegin(ENUMCK_FIELD_DESC);
        oprot.writeI32(struct.enumck.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
  }
  private static class StudentTupleSchemeFactory implements SchemeFactory {
    @Override
    public StudentTupleScheme getScheme() {
      return new StudentTupleScheme();
    }
  }
  private static class StudentTupleScheme extends TupleScheme<Student> {
    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Student struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolck()) {
        optionals.set(0);
      }
      if (struct.isSetByteck()) {
        optionals.set(1);
      }
      if (struct.isSetI16ck()) {
        optionals.set(2);
      }
      if (struct.isSetI32ck()) {
        optionals.set(3);
      }
      if (struct.isSetI64ck()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleck()) {
        optionals.set(5);
      }
      if (struct.isSetStringck()) {
        optionals.set(6);
      }
      if (struct.isSetListstu()) {
        optionals.set(7);
      }
      if (struct.isSetSetstu()) {
        optionals.set(8);
      }
      if (struct.isSetMapstu()) {
        optionals.set(9);
      }
      if (struct.isSetEnumck()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetBoolck()) {
        oprot.writeBool(struct.boolck);
      }
      if (struct.isSetByteck()) {
        oprot.writeByte(struct.byteck);
      }
      if (struct.isSetI16ck()) {
        oprot.writeI16(struct.i16ck);
      }
      if (struct.isSetI32ck()) {
        oprot.writeI32(struct.i32ck);
      }
      if (struct.isSetI64ck()) {
        oprot.writeI64(struct.i64ck);
      }
      if (struct.isSetDoubleck()) {
        oprot.writeDouble(struct.doubleck);
      }
      if (struct.isSetStringck()) {
        oprot.writeString(struct.stringck);
      }
      if (struct.isSetListstu()) {
        {
          oprot.writeI32(struct.liststu.size());
          for (Student _iter13 : struct.liststu) {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetSetstu()) {
        {
          oprot.writeI32(struct.setstu.size());
          for (Student _iter14 : struct.setstu) {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetMapstu()) {
        {
          oprot.writeI32(struct.mapstu.size());
          for (Map.Entry<String, Student> _iter15 : struct.mapstu.entrySet()) {
            oprot.writeString(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetEnumck()) {
        oprot.writeI32(struct.enumck.getValue());
      }
    }
    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Student struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.boolck = iprot.readBool();
        struct.setBoolckIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteck = iprot.readByte();
        struct.setByteckIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i16ck = iprot.readI16();
        struct.setI16ckIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i32ck = iprot.readI32();
        struct.setI32ckIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i64ck = iprot.readI64();
        struct.setI64ckIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleck = iprot.readDouble();
        struct.setDoubleckIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringck = iprot.readString();
        struct.setStringckIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.liststu = new ArrayList<Student>(_list16.size);
          Student _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
            _elem17 = new Student();
            _elem17.read(iprot);
            struct.liststu.add(_elem17);
          }
        }
        struct.setListstuIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.setstu = new HashSet<Student>(2 * _set19.size);
          Student _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21) {
            _elem20 = new Student();
            _elem20.read(iprot);
            struct.setstu.add(_elem20);
          }
        }
        struct.setSetstuIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mapstu = new HashMap<String, Student>(2 * _map22.size);
          String _key23;
          Student _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25) {
            _key23 = iprot.readString();
            _val24 = new Student();
            _val24.read(iprot);
            struct.mapstu.put(_key23, _val24);
          }
        }
        struct.setMapstuIsSet(true);
      }
      if (incoming.get(10)) {
        struct.enumck = com.apache.thrift.struct.java.dep.vo.StudentEnum.findByValue(iprot.readI32());
        struct.setEnumckIsSet(true);
      }
    }
  }
}
